class - blueprint (инструкция), по която ние създаваме обекти, дефинираме процес, който да ги създава по определен начин
разлика м/у класовете и структурите в размера и приложението
в класа всичко по начало е private, а в структурата public
енкапсулация - затваряне на данни, които не искаме на експоузваме, даваме им определен изход и вход
разликата между метод и функция - method е в класа

класът е рецептата, а обектът самото ястие
разгледахме дефолт конструктури и с параметри
монолит - цялото приложение е на едно място
микросървисна архитектура - разбит монолит

constructor -  a special function of a class that is automatically called when an object is created.
destructor - a special function of a class that is automatically called when an object goes out of scope or is explicitly deleted

голямата 5рка:
default constructor
param constructor
copy constructor
move constructor
operator= (a special kind of operator used to assign the value of one object to another of the same type.)

статичната променлива е обвързана с класа, а не с обекта
само статични методи могат да променят статични променливи извън класа
константните полета се инициализират с конструктор

модификатори (visability) - public или private; protected- семейна тайна
const след функцията -> не модифицира вътрешното състояние на обекта, не трябва да променя стойността и не може да връщаш референция или трябва да е константна

virtual - ще бъде overrite-nata, ако няма тяло е напълно виртуална
абстрактен клас - има само един напълно виртуален метод
vector<Base*> - много е важно да се ползва pointer, за да са еднакъв размер и да не се shrink-va 
виртуална таблица - 

overwrite vs overload - добавяш аргумент

inheritance - позволява на един клас да наследи свойства и поведение от друг клас. Това означава, че новият клас може да използва полетата и методите на базовия клас, без да е необходимо да ги дефинира наново.

abstraction - процес на извличане на съществените характеристики и функции на даден обект или система, като същевременно се игнорират детайлите, които не са от значение в конкретния контекст; позволява да работим с концепции и модели, без да се грижим за детайлите на тяхната реализация

polymorphism - eдин интерфейс да се използва за различни типове данни; позволява на обекти от различни класове да бъдат третирани по един и същ начин чрез общ интерфейс, най-често чрез наследяване и използването на виртуални функции

encapsulation - вътрешното състояние на обекта (неговите данни) е скрито от външния свят и може да бъде достъпено само чрез дефинирани публични методи (интерфейс)

friend ostream& operator<<(ostream& os, const Recipe& recipe);

ostream& operator<<(ostream& os, const Recipe& recipe) {
    os << "Recipe: " << recipe.name << "\n";
    os << "Ingredients:\n";
    for (const auto& ingredient : recipe.ingredients) {
        os << "- " << ingredient << "\n";
    }
    os << "Instructions: " << recipe.instructions << "\n";
    return os;
}

 friend istream& operator>>(istream& is, Car& car);

istream& operator>>(istream& is, Car& car) {
    cout << "Enter make: ";
    is >> car.make;
    cout << "Enter model: ";
    is >> car.model;
    cout << "Enter year: ";
    is >> car.year;
    return is;
}

stream - поток от данни
input and output streams
да имаш външна функция която за параметър да искаш прайвет полета и най- лесният начин е да вкараш функция в класа а искаш да подадеш обекта като параметър и за да не е метод на класа
za nestvane na klasove
sus friend promenqme scope-a

функции vs методи
Функциите се използват за общи задачи и действия, докато методите се използват за работа с конкретни обекти и манипулиране на техните състояния. 

Прилики и разлики между копиращ конструктор и оператор=.
Декларация в С++, начин на ползване, кога се използват?

Копиращият конструктор се използва при създаването на нов обект и го инициализира обект от нулата.
Операторът за присвояване се използва за присвояване на стойности на вече съществуващ обект, първо да освободи съществуващите ресурси на обекта (ако има такива), преди да копира стойностите.
